/* tslint:disable */
/* eslint-disable */
/**
* @param {Uint8Array} d
* @param {any} encoding
* @param {any} type_narrowing
* @returns {Query}
*/
export function parse_text(d: Uint8Array, encoding: any, type_narrowing: any): Query;
/**
* @returns {WasmWriter}
*/
export function write_text(): WasmWriter;
/**
* Holds the parsed data for a short period of time, allowing a user to extract all or a subset of the
* parsed document
*/
export class Query {
  free(): void;
/**
* Convert the entire document into an object
* @returns {any}
*/
  root(): any;
/**
* Convert the entire document into a JSON string
* @param {boolean} pretty
* @param {string} key_mode
* @returns {any}
*/
  json(pretty: boolean, key_mode: string): any;
/**
* Return the object, array, or value pointed at by the query. Uses a format similar to JSON pointer:
*
* ```ignore
* /player
* /countries/ENG/prestige
* ```
* @param {string} query
* @returns {any}
*/
  at(query: string): any;
}
/**
*/
export class WasmWriter {
  free(): void;
/**
* @returns {Uint8Array}
*/
  inner(): Uint8Array;
/**
*/
  write_object_start(): void;
/**
*/
  start_mixed_mode(): void;
/**
*/
  write_array_start(): void;
/**
*/
  write_end(): void;
/**
* @param {boolean} data
*/
  write_bool(data: boolean): void;
/**
* @param {string} data
*/
  write_operator(data: string): void;
/**
* @param {Uint8Array} data
*/
  write_unquoted(data: Uint8Array): void;
/**
* @param {Uint8Array} data
*/
  write_quoted(data: Uint8Array): void;
/**
* @param {number} data
*/
  write_integer(data: number): void;
/**
* @param {bigint} data
*/
  write_u64(data: bigint): void;
/**
* @param {number} data
*/
  write_f32(data: number): void;
/**
* @param {number} data
*/
  write_f64(data: number): void;
/**
* @param {Uint8Array} data
*/
  write_header(data: Uint8Array): void;
/**
* @param {Date} data
* @param {boolean} hour
*/
  write_date(data: Date, hour: boolean): void;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_query_free: (a: number) => void;
  readonly query_root: (a: number, b: number) => void;
  readonly query_json: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly query_at: (a: number, b: number, c: number, d: number) => void;
  readonly parse_text: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly write_text: (a: number) => void;
  readonly __wbg_wasmwriter_free: (a: number) => void;
  readonly wasmwriter_inner: (a: number, b: number) => void;
  readonly wasmwriter_write_object_start: (a: number, b: number) => void;
  readonly wasmwriter_start_mixed_mode: (a: number) => void;
  readonly wasmwriter_write_array_start: (a: number, b: number) => void;
  readonly wasmwriter_write_end: (a: number, b: number) => void;
  readonly wasmwriter_write_bool: (a: number, b: number, c: number) => void;
  readonly wasmwriter_write_operator: (a: number, b: number, c: number, d: number) => void;
  readonly wasmwriter_write_unquoted: (a: number, b: number, c: number, d: number) => void;
  readonly wasmwriter_write_quoted: (a: number, b: number, c: number, d: number) => void;
  readonly wasmwriter_write_integer: (a: number, b: number, c: number) => void;
  readonly wasmwriter_write_u64: (a: number, b: number, c: number) => void;
  readonly wasmwriter_write_f32: (a: number, b: number, c: number) => void;
  readonly wasmwriter_write_f64: (a: number, b: number, c: number) => void;
  readonly wasmwriter_write_header: (a: number, b: number, c: number, d: number) => void;
  readonly wasmwriter_write_date: (a: number, b: number, c: number, d: number) => void;
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number, c: number) => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {SyncInitInput} module
*
* @returns {InitOutput}
*/
export function initSync(module: SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
